from read_data import get_df
import json 
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import model_selection, naive_bayes, svm
from sklearn.metrics import accuracy_score
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt


def create_SVMmodel():
    '''
        Train SVM Model and return it
    '''
    code_testing = False

    #get a dataframe
    df = get_df()

    #split data into training and testing set
    X_train, X_test, Y_train, Y_test = train_test_split(df['Code'],df['Label'],test_size=.25)

    #Encoding target variable
    Encoder = LabelEncoder()
    Y_train = Encoder.fit_transform(Y_train)
    Y_test = Encoder.fit_transform(Y_test)

    #turn code into numerical feature vectors (Term Frequency Inverse Document)
    tf_idf = TfidfVectorizer(max_features=5000)
    tf_idf.fit(df['Code'])
    X_train_tf_idf = tf_idf.transform(X_train)
    X_test_tf_idf = tf_idf.transform(X_test)

    #What has been learned
    if code_testing:
        print(tf_idf.vocabulary_)
        #raw vectorized data
        print(X_train_tf_idf)

    #---- SVM ------
    #train
    SVM_model = svm.SVC(C=1.0, kernel='poly',degree=3,gamma='auto')
    SVM_model.fit(X_train_tf_idf,Y_train)

    #test
    predictions_SVM = SVM_model.predict(X_test_tf_idf)
    print('SVM Accuracy:',accuracy_score(predictions_SVM,Y_test))


    #----- Try Naive Bayes Classifier Algorithm for comparison-----
    #train
    Naive_model = naive_bayes.MultinomialNB()
    Naive_model.fit(X_train_tf_idf,Y_train)

    #test
    predictions_Naive = Naive_model.predict(X_test_tf_idf)
    print('Naive Accuracy:',accuracy_score(predictions_Naive,Y_test))

    return SVM_model, X_train_tf_idf, Y_train

def plot_clusters(model,X_train,Y_train):
    '''
        input SVM model object
    '''

    #reduce features to 2d
    pca = PCA(n_components=2,random_state=0)
    reduced_features = pca.fit_transform(X_train.toarray())

    plt.scatter(reduced_features[:,0],reduced_features[:,1],c=Y_train)
    plt.show()

    # #index numbers of samples from training set that were found to be support vectors
    # support_vector_indices = model.support_
    # print(f'Support Vector Indices: {support_vector_indices}')

    # #number of support vectors per class
    # support_vectors_per_class = model.n_support_
    # print(f'Vectors per class: {support_vectors_per_class}')


if __name__ == '__main__':
    #create model
    SVM_model, X_train_v, Y_train_v = create_SVMmodel()
    #plot clusters
    plot_clusters(SVM_model,X_train_v,Y_train_v)